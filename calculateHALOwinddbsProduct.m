function calculateHALOwinddbsProduct(site,DATES,noofbeams)
%CALCULATEHALOWINDDBSPRODUCT reads dbs files and calculates (u,v,w) wind 
% components, wind speed, wind direction and writes wind retrieval into 
% daily netcdf files.
%
% Usage:
% calculateHALOwinddbsProduct(site,DATES,noofbeams)
%
% Inputs:
% -site        String, site name, e.g. site = 'kuopio'
% -DATES       Scalar or vector, numeric, e.g. DATES = 20170401 
%              or DATES = [20170401 20170431]
% -noofbeams   string, '3beams'
%
% Created 2018-02-22
% Antti Manninen
% University of Helsinki, Finland
% antti.j.manninen@helsinki.fi

if nargin < 3
    error('''site'', ''DATES'', ''noofbeams'' are required inputs!')
end
if ~ischar(site)
    error('The first input ''site'' must be a string.')
end
if length(DATES)>2
    error('''DATES'' can have max. length of 2.')
elseif length(DATES)==1
    DATEstart = DATES; DATEend = DATES;
elseif ~isnumeric(DATES) || (length(num2str(DATES(1)))~=8 && ...
        length(num2str(DATES(2)))~=8)
    error(['The value(s) in the second input ''DATES'' must be' ...
        ' numerical date(s) in YYYYMMDD format.'])
else
    DATEstart = DATES(1); DATEend = DATES(2);
end
if ~ischar(noofbeams) && strcmp(noofbeams,'3beams') 
    error('The 3rd input must be a string and for now must be''3beams''.')
end

for DATEi = datenum(num2str(DATEstart),'yyyymmdd'):...
        datenum(num2str(DATEend),'yyyymmdd')

    % Convert date into required formats
    thedate = datestr(DATEi,'yyyymmdd');
    DATE = str2double(thedate);
    
    % Get default and site/unit/period specific parameters
    C = getconfig(site,DATE);

    % Get list of files
    [dir_to_folder_in,halo_dbs_files] = getHALOfileList(site,DATE,'calibrated','dbs',noofbeams);
    [dir_to_folder_out,~] = getHALOfileList(site,DATE,'product','winddbs',noofbeams);

    if isempty(halo_dbs_files)
       continue;
    end
  
    % Check path to write out
    status = checkHALOpath(site,DATE,'product','winddbs',noofbeams);
    if isempty(status)
       fprintf('Can''t write %s - %s.',num2str(DATE),site);
       continue;
    end
    
    time = cell(1,length(halo_dbs_files));
    u = cell(1,length(halo_dbs_files));
    v = cell(1,length(halo_dbs_files));
    w = cell(1,length(halo_dbs_files));
    ws = cell(1,length(halo_dbs_files));
    wd = cell(1,length(halo_dbs_files));
    signal = cell(1,length(halo_dbs_files));
    
    
    for i = 1:length(halo_dbs_files)
        % Load
        [tmp,~,~] = load_nc_struct(fullfile([dir_to_folder_in '/' halo_dbs_files{i}]));
        
        % Check time vector
        midnight = find(diff(tmp.time)< -23);
        if not(isempty(midnight))
            tmp.time(midnight+1:end) = tmp.time(midnight+1:end) + 24;
        end
        
        
        
        V_RZ = tmp.v_raw(tmp.elevation > 3 & (tmp.elevation >= 90*.99 & tmp.elevation <= 90*1.01),:);
        V_RE = tmp.v_raw(tmp.elevation > 3 & (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            (tmp.azimuth >= 90*.99 & tmp.azimuth <= 90*1.01),:);
        V_RN = tmp.v_raw(tmp.elevation > 3 & (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            ((tmp.azimuth >= 360*.99 & tmp.azimuth <= 360*1.01) | ...
            (tmp.azimuth >= 0-.01 & tmp.azimuth <= 0+.01)),:);
        
        % wind components (u,v,w)
        u{i} = ( V_RE - V_RZ .* ...
            cosd( 90-tmp.elevation(tmp.elevation > 3 & ...
            (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            (tmp.azimuth >= 90*.99 & tmp.azimuth <= 90*1.01)))) ./ ...
            sind( 90-tmp.elevation(tmp.elevation > 3 & ...
            (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            (tmp.azimuth >= 90*.99 & tmp.azimuth <= 90*1.01)) );
        v{i} = ( V_RN - V_RZ .* ...
            cosd( 90-tmp.elevation(tmp.elevation > 3 & ...
            (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            ((tmp.azimuth >= 360*.99 & tmp.azimuth <= 360*1.01) | ...
            (tmp.azimuth >= 0-.01 & tmp.azimuth <= 0+.01))) ) ) ./ ...
            sind( 90-tmp.elevation(tmp.elevation > 3 & ...
            (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
            ((tmp.azimuth >= 360*.99 & tmp.azimuth <= 360*1.01) | ...
            (tmp.azimuth >= 0-.01 & tmp.azimuth <= 0+.01))) );
        w{i} = V_RZ;
        
        % Wind speed
        ws{i} = sqrt(u{i}.^2 + v{i}.^2);
        
        % Wind direction
        r2d = 45.0/atan(1.0); % conversion factor
        wd{i} = atan2(u{i}, v{i}) * r2d + 180;

        % mean signal and time
        signal_tmp = tmp.signal(tmp.elevation > 3,:);
        signal{i} = reshape(nanmedian(reshape(signal_tmp(:),3,length(signal_tmp(:))/3)),size(ws{i},1),length(tmp.range));
        time_tmp = tmp.time(tmp.elevation > 3);
        time{i} = nanmedian(time_tmp(reshape(1:length(time_tmp),3,length(time_tmp)/3)));

    end
    
    % Calculate height above ground level (m)
    height = sind(nanmedian(tmp.elevation(...
        (tmp.elevation >= 70*.99 & tmp.elevation <= 70*1.01) & ...
        (tmp.azimuth >= 90*.99 & tmp.azimuth <= 90*1.01)))).*tmp.range;

    %%--- Create variables ---%%
    data.time = transpose(cell2mat(time(:))); % hrs
    data.latitude = tmp.latitude; % deg
    data.longitude = tmp.longitude; % deg
    data.altitude = tmp.altitude;
    data.mean_snr = cell2mat((signal));
    data.height = height(:); % m
    % Wind components
    data.u = (cell2mat(u));
    data.v = (cell2mat(v));
    data.w = (cell2mat(w));
    % Wind speed and direction
    data.wind_speed = (cell2mat(ws));
    data.wind_direction = (cell2mat(wd));   

    % Create default or instrument/site/unit specific variables
    abc = ['dbs_' noofbeams];

    data.divergence = C.divergence;
    data.num_pulses_m2 = C.(['num_pulses_m2_' abc]);
    data.num_pulses_m1 = C.(['num_pulses_m1_' abc]);
    data.num_samples_gate = C.(['num_samples_gate_' abc]);
    data.lens_diameter = C.lens_diameter;
    data.wavelength = C.wavelength;
    data.prf = C.prf;
    data.pulse_length = C.pulse_length;
    data.bandwidth = C.bandwidth;
    data.focus = C.(['focus_' abc]);
    
    %%--- Create attributes ---%%
    % mean snr
    att.mean_snr = create_attributes(...
        {'time','height'},...
        'Signal-to-noise ratio (SNR) in arbitrary units (SNR+1) averaged over nbeams', ...
        'SNR+1');
    % height
    att.height = create_attributes(...
        {'height'},...
        'Height above ground', ...
        'm',...
        [],...
        'This variable is range from lidar * sin(elevation)');
    att.height.axis = 'Z';
    % u-wind component
    att.u = create_attributes(...
        {'time','height'},...
        'Zonal wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-15 15],'linear'});
    att.u.standard_name = 'eastward_wind';
    % v-wind component
    att.v = create_attributes(...
        {'time','height'},...
        'Meridional wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-15 15],'linear'});
    att.v.standard_name = 'northward_wind';
    % w-wind component
    att.w = create_attributes(...
        {'time','height'},...
        'Vertical wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-2 2],'linear'});
    att.w.standard_name = 'upward_wind';
    % wind speed
    att.wind_speed = create_attributes(...
        {'time','height'},...
        'Wind speed', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[0 15],'linear'});
    % wind direction
    att.wind_direction = create_attributes(...
        {'time','height'},...
        'Wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        ['Meteorological convention, direction wind is blowing from.' ...
        ' No noise filtering.'], ...
        {[0 360],'linear'});
    
    
     %%--- Create isntrument/site/unit specific attributes --%%
    % latitude
    att.latitude = create_attributes(...
        {},...
        'Latitude of lidar', ...
        'degrees_north');
    att.latitude.standard_name = 'latitude';
    % longitude
    att.longitude = create_attributes(...
        {},...
        'Longitude of lidar', ...
        'degrees_east');
    att.longitude.standard_name = 'longitude';
    % altitude
    att.altitude = create_attributes(...
        {},...
        'Height of instrument above mean sea level', ...
        'm');
    % num_pulses_m1
    att.num_pulses_m1 = create_attributes(...
        {},...
        'Number of pulses per ray in mode 1', ...
        'unitless');
    % focus
    att.focus = create_attributes(...
        {},...
        'Focus range', ...
        'm');
    % num_samples_gate
    att.num_samples_gate = create_attributes(...
        {},...
        'Number of samples (points) per gate', ...
        'unitless');
    % divergence
    att.divergence = create_attributes(...
        {},...
        'Lidar laser beam divergence', ...
        'mrad');
    % num_pulses_m2
    att.num_pulses_m2 = create_attributes(...
        {},...
        'Number of pulses per ray in mode 2', ...
        'unitless');
    
    att.lens_diameter = create_attributes(...
        {},...
        'diameter of lens', ...
        'm');
    % wavelength
    att.wavelength = create_attributes(...
        {},...
        'laser wavelength', ...
        'm');
    % prf
    att.prf = create_attributes(...
        {},...
        'Pulse repetition frequency', ...
        'Hz');
    % pulse length
    att.pulse_length = create_attributes(...
        {},...
        'Pulse length', ...
        's');
    % bandwidth
    att.bandwidth = create_attributes(...
        {},...
        'Bandwidth', ...
        'Hz');
    % time
    att.time = create_attributes(...
        {'time'},...
        'Decimal hours UTC', ...
        'Hours UTC');
    att.time.axis = 'T';
    
    %%--- Create global attributes ---%%
    % Create global attributs
    att.global.Conventions = 'CF-1.0';
    att.global.system = C.system;
    att.global.location = C.location;
    att.global.source = C.source;
    att.global.institution = C.institution;
    att.global.title = C.title;
    att.global.day   = str2double(thedate(7:8));
    att.global.month = str2double(thedate(5:6));
    att.global.year  = str2double(thedate(1:4));
    current_date = datestr(now,'yyyy-mm-dd HH:MM:SS');
    att.global.history = [current_date ' - Created by ' C.user ];

    % Create dimensions
    dim = struct('time',length(data.time),'height',length(data.height));

    data = orderfields(data);
    att = orderfields(att);
    
    % Write into new netcdf
%     write_nc_struct(fullfile([dir_to_folder_out '/' thedate '_' site '_halo-doppler-lidar_wind-dbs-' noofbeams  '.nc']), dim, data, att)
    write_nc_silent(fullfile([dir_to_folder_out '/' thedate '_' site '_halo-doppler-lidar_wind-dbs-' noofbeams  '.nc']), dim, data, att)

end


end

