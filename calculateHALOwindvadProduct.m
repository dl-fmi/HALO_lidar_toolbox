function calculateHALOwindvadProduct(site,DATES,elevangle,varargin)
%CALCULATEHALOWINDVADPRODUCT reads ppi files and calculates (u,v,w) wind 
% components, wind speed, wind direction, respective errors due to
% random instumental noise, and overall errors using VAD tehcnique, and
% writed wind retrieval into daily netcdf files.
%
% Usage:
% calculateHALOwindvadProduct(site,DATES,elevangle)
%
% Inputs:
% -site        String, site name, e.g. site = 'kuopio'
% -DATES       Scalar or vector, numeric, e.g. DATES = 20170401 
%              or DATES = [20170401 20170431]
% -elevangle   string, elevation angle 0-90
%
% Created 2017-10-29
% Antti Manninen
% University of Helsinki, Finland
% antti.j.manninen@helsinki.fi

p.fit_error = true;
p.v_error_threshold = 20; % in (m s-1)), i.e. cuts nothing
p.snr_threshold = 1; % in (SNR+1), i.e. cuts nothing
if ~isempty(varargin)
    p = parsePropertyValuePairs(p, varargin);
end


if nargin < 3
    error('''site'', ''DATES'', ''elevation'' are required inputs!')
end
if ~ischar(site)
    error('The first input ''site'' must be a string.')
end
if length(DATES)>2
    error('''DATES'' can have max. length of 2.')
elseif length(DATES)==1
    DATEstart = DATES; DATEend = DATES;
elseif ~isnumeric(DATES) || (length(num2str(DATES(1)))~=8 && ...
        length(num2str(DATES(2)))~=8)
    error(['The value(s) in the second input ''DATES'' must be' ...
        ' numerical date(s) in YYYYMMDD format.'])
else
    DATEstart = DATES(1); DATEend = DATES(2);
end
if (~ischar(elevangle) || length(elevangle) ~= 2 || (~isempty(str2num(elevangle)) && str2num(elevangle)<0 || str2num(elevangle)>90)) & not(strcmp(elevangle,'0'))
    error('The 3rd input must be a string and no longer than 2 characters specifying the elevation angle 0-90 degrees.')
end
for DATEi = datenum(num2str(DATEstart),'yyyymmdd'):...
        datenum(num2str(DATEend),'yyyymmdd')

    % Convert date into required formats
    thedate = datestr(DATEi,'yyyymmdd');
    DATE = str2double(thedate);
    
    % Get default and site/unit/period specific parameters
    C = getconfig(site,DATE);

    if ~isnan(p.v_error_threshold)
       th_cut_v_error = p.v_error_threshold;
    elseif isfield(C,'v_error_threshold_for_windvad')    
       th_cut_v_error = C.v_error_threshold_for_windvad;
    else
       th_cut_v_error = 20; % includes all
    end
    if ~isnan(p.snr_threshold)
       th_cut_snr = p.snr_threshold;
    elseif isfield(C,'snr_threshold_for_windvad')    
       th_cut_snr = C.snr_threshold_for_windvad;
    else
       th_cut_snr = 1; % includes all
    end
  

    % Get list of files
    elevangle1 = ['ele' elevangle];
    abc = ['vad_' elevangle1];
    [dir_to_folder_in,halo_vad_files] = getHALOfileList(site,DATE,'calibrated','vad',elevangle1);
    [dir_to_folder_out,~] = getHALOfileList(site,DATE,'product','windvad',elevangle1);

    if isempty(halo_vad_files)
       continue;
    end
  
    % Check path to write out
    status = checkHALOpath(site,DATE,'product','windvad',elevangle1);
    if isempty(status)
       fprintf('Can''t write %s - %s.',num2str(DATE),site);
       continue;
    end

    % Initialize
    time = cell(1,length(halo_vad_files));
    elevation_angle = cell(1,length(halo_vad_files));
    mean_snr = cell(1,length(halo_vad_files));
    uwind = cell(1,length(halo_vad_files));
    vwind = cell(1,length(halo_vad_files));
    wwind = cell(1,length(halo_vad_files));
    wind_speed = cell(1,length(halo_vad_files));
    wind_direction = cell(1,length(halo_vad_files));
    uwind_error = cell(1,length(halo_vad_files));
    vwind_error = cell(1,length(halo_vad_files));
    wwind_error = cell(1,length(halo_vad_files));
    wind_speed_error = cell(1,length(halo_vad_files));
    wind_direction_error = cell(1,length(halo_vad_files));
    uwind_error_instrumental = cell(1,length(halo_vad_files));
    vwind_error_instrumental = cell(1,length(halo_vad_files));
    wwind_error_instrumental = cell(1,length(halo_vad_files));
    wind_speed_error_instrumental = cell(1,length(halo_vad_files));
    wind_direction_error_instrumental = cell(1,length(halo_vad_files));
    R_squared = cell(1,length(halo_vad_files));
    RMSE = cell(1,length(halo_vad_files));
    CN = cell(1,length(halo_vad_files));
    

    for i = 1:length(halo_vad_files)
        % Load
        [tmp,~,~] = load_nc_struct(fullfile([dir_to_folder_in '/' ...
            halo_vad_files{i}]),{'time','range','azimuth','elevation',...
				 'v_raw','signal','beta_error','v_error'});

        % Wind retrieval
        Din.time = tmp.time;
        Din.range = tmp.range;
        Din.azimuth = tmp.azimuth;
        Din.elevation = tmp.elevation;
        Din.velocity_raw = tmp.v_raw;
        Din.velocity = tmp.v_raw;
        Din.velocty_error = tmp.v_error;
        Din.velocity(tmp.v_error > th_cut_v_error | tmp.signal < th_cut_snr) = nan;
        Din.snr = tmp.signal;
        Din.snr_e = tmp.beta_error .* tmp.signal;

        % Check time vector
        midnight = find(diff(Din.time)< -24);
        if not(isempty(midnight))
            Din.time(midnight+1:end) = Din.time(midnight+1:end) + 24;
        end
        
        % Standard deviation of velocity estimate (Rye and Hardesty, 1997)
        Din.velocity_error = calculateHALOveloError(site,DATE,'vad',elevangle1,Din.snr);
        
        % Wind retrieval
        Dout = ppi2windsVAD(Din,'fit_error',p.fit_error);
        
        % Collect
        uwind{i} = Dout.u;
        vwind{i} = Dout.v;
        wwind{i} = Dout.w;
        wind_speed{i} = Dout.ws;
        wind_direction{i} = Dout.wd;
        uwind_error{i} = Dout.u_error;
        vwind_error{i} = Dout.v_error;
        wwind_error{i} = Dout.w_error;
        wind_speed_error{i} = Dout.ws_error;
        wind_direction_error{i} = Dout.wd_error;
        uwind_error_instrumental{i} = Dout.u_error_instr;
        vwind_error_instrumental{i} = Dout.v_error_instr;
        wwind_error_instrumental{i} = Dout.w_error_instr;
        wind_speed_error_instrumental{i} = Dout.ws_error_instr;
        wind_direction_error_instrumental{i} = Dout.wd_error_instr;
        R_squared{i} = Dout.R_squared;
        RMSE{i} = Dout.RMSE;
        CN{i} = Dout.CN;
                
        % Collect other variables and parameters
        elevation_angle{i} = nanmedian(Din.elevation(:));
        time{i} = nanmedian(Din.time(:));
        if length(weightedMean(Din.snr,Din.snr_e,'unweighted'))==1
            mean_snr{i} = nan(1,length(Din.velocity));
        else
            mean_snr{i} = weightedMean(Din.snr,Din.snr_e,'unweighted');
        end
    end
    
    % Create and copy common attributes and fields
    [data,att,dim] = createORcopyCommonAttsDims(Din,C);

    %%--- Create variables ---%%
    data.range = tmp.range;
    data.time = transpose(cell2mat(time)); % hrs
    data.elevation = transpose(cell2mat(elevation_angle)); % deg
    data.mean_snr = cell2mat(transpose(mean_snr));
    % Wind components
    data.u = transpose(cell2mat(uwind));
    data.v = transpose(cell2mat(vwind));
    data.w = transpose(cell2mat(wwind));
    % Wind speed and direction
    data.wind_speed = transpose(cell2mat(wind_speed));
    data.wind_direction = transpose(cell2mat(wind_direction));
    % Total error estimate for wind components, speed and direction 
    % adapted from Newsom et al. (2017)    
    data.u_error = transpose(cell2mat(uwind_error));
    data.v_error = transpose(cell2mat(vwind_error));
    data.w_error = transpose(cell2mat(wwind_error));
    data.wind_speed_error = transpose(cell2mat(wind_speed_error));
    data.wind_direction_error = transpose(cell2mat(wind_direction_error));
    % Instrumental error estimates for wind components, speed and direction
    % adapted from Rye and Hardesty (1997) and Paeschke et al. (2015)
    data.u_error_instrumental = transpose(cell2mat(uwind_error_instrumental));
    data.v_error_instrumental = transpose(cell2mat(vwind_error_instrumental));
    data.w_error_instrumental = transpose(cell2mat(wwind_error_instrumental));
    data.wind_speed_error_instrumental = ...
      transpose(cell2mat(wind_speed_error_instrumental));
    data.wind_direction_error_instrumental = ...
      transpose(cell2mat(wind_direction_error_instrumental));
    % Test for homogeneity as given by Paeschke et al. (2015)
    data.R_squared = transpose(cell2mat(R_squared));
    data.RMSE = transpose(cell2mat(RMSE));
    % Test for colinearity as given by Paeschke et al. (2015)
    data.CN = transpose(cell2mat(CN));
    % Create default or instrument/site/unit specific variables
    data.divergence = C.divergence;
    data.num_pulses_m2 = C.(['num_pulses_m2_' abc]);
    data.num_pulses_m1 = C.(['num_pulses_m1_' abc]);
    data.num_samples_gate = C.(['num_samples_gate_' abc]);
    data.lens_diameter = C.lens_diameter;
    data.wavelength = C.wavelength;
    data.prf = C.prf;
    data.pulse_length = C.pulse_length;
    data.bandwidth = C.bandwidth;
    data.focus = C.(['focus_' abc]);
    

    
    
    %%--- Create attributes ---%%
    % mean snr
    att.mean_snr = create_attributes(...
        {'time','range'},...
        'Signal-to-noise ratio (SNR) in arbitrary units (SNR+1) averaged over nbeams', ...
        'SNR+1');
    % u-wind component
    att.u = create_attributes(...
        {'time','range'},...
        'Zonal wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-15 15],'linear'});
    att.u.standard_name = 'eastward_wind';
    % v-wind component
    att.v = create_attributes(...
        {'time','range'},...
        'Meridional wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-15 15],'linear'});
    att.v.standard_name = 'northward_wind';
    % w-wind component
    att.w = create_attributes(...
        {'time','range'},...
        'Vertical wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[-2 2],'linear'});
    att.w.standard_name = 'upward_wind';
    % wind speed
    att.wind_speed = create_attributes(...
        {'time','range'},...
        'Wind speed', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['No noise filtering.'], ...
        {[0 15],'linear'});
    % wind direction
    att.wind_direction = create_attributes(...
        {'time','range'},...
        'Wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        ['Meteorological convention, direction wind is blowing from.' ...
        ' No noise filtering.'], ...
        {[0 360],'linear'});
    
    % Instrumental u-wind error
    att.u_error_instrumental = create_attributes(...
        {'time','range'},...
        'Instrumental uncertainty in zonal wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Estimated from the signal-to-noise ratio.', ...
        {[0 1],'linear'});
    % Instrumental v-wind error
    att.v_error_instrumental = create_attributes(...
        {'time','range'},...
        'Instrumental uncertainty in meridional wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Estimated from the signal-to-noise ratio.', ...
        {[0 1],'linear'});
    % Instrumental w-wind error
    att.w_error_instrumental = create_attributes(...
        {'time','range'},...
        'Instrumental uncertainty in vertical wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Estimated from the signal-to-noise ratio.', ...
        {[0 1],'linear'});
    % Instrumental wind speed error
    att.wind_speed_error_instrumental = create_attributes(...
        {'time','range'},...
        'Instrumental uncertainty in wind speed', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        '', ...
        {[0 2],'linear'});
    % Instrumental wind direction error
    att.wind_direction_error_instrumental = create_attributes(...
        {'time','range'},...
        'Instrumental uncertainty in wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        '', ...
        {[0 30],'linear'});
    % Test for homogeneity R_sqrd
    att.R_squared = create_attributes(...
        {'time','range'},...
        'R squared', ...
        {'unitless','unitless'}, ...
        C.missing_value, ...
        'Test for homogeneity R squared.', ...
        {[.99 1],'linear'});
    % Test for homogeneity RMSE
    att.RMSE = create_attributes(...
        {'time','range'},...
        'Root-mean-square-error', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Test for homogeneity Root-mean-square-error.', ...
        {[0 1],'linear'});
    % Test for collinearity CN
    att.CN = create_attributes(...
        {'time','range'},...
        'Condition number', ...
        {'unitless','unitless'}, ...
        C.missing_value, ...
        'Test for collinearity condition number.', ...
        {[1 30],'linear'});
    % u-wind error Newsom et al. (2017)
    att.u_error = create_attributes(...
        {'time','range'},...
        'Uncertainty in zonal wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Calculated using the method given by Newsom et al. (2017).', ...
        {[0 1],'linear'});
    % v-wind error Newsom et al. (2017)
    att.v_error = create_attributes(...
        {'time','range'},...
        'Uncertainty in meridional wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Calculated using the method given by Newsom et al. (2017).', ...
        {[0 1],'linear'});
    % w-wind error Newsom et al. (2017)
    att.w_error = create_attributes(...
        {'time','range'},...
        'Uncertainty in vertical wind', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Calculated using the method given by Newsom et al. (2017).', ...
        {[0 1],'linear'});
    % wind speed error Newsom et al. (2017)
    att.wind_speed_error = create_attributes(...
        {'time','range'},...
        'Uncertainty in wind speed', ...
        {'m s-1','m s<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Calculated using the method given by Newsom et al. (2017).', ...
        {[0 2],'linear'});
    % wind direction error Newsom et al. (2017)
    att.wind_direction_error = create_attributes(...
        {'time','range'},...
        'Uncertainty in wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        'Calculated using the method given by Newsom et al. (2017).', ...
        {[0 30],'linear'});
    
    %%--- Create isntrument/site/unit specific attributes --%%
    % elevation
    att.elevation = create_attributes(...
        {'time'},...
        'Elevation from horizontal', ...
        'degrees');
    % num_pulses_m1
    att.num_pulses_m1 = create_attributes(...
        {},...
        'Number of pulses per ray in mode 1', ...
        'unitless');
    % focus
    att.focus = create_attributes(...
        {},...
        'Focus range', ...
        'm');
    % num_samples_gate
    att.num_samples_gate = create_attributes(...
        {},...
        'Number of samples (points) per gate', ...
        'unitless');
    % divergence
    att.divergence = create_attributes(...
        {},...
        'Lidar laser beam divergence', ...
        'mrad');
    % num_pulses_m2
    att.num_pulses_m2 = create_attributes(...
        {},...
        'Number of pulses per ray in mode 2', ...
        'unitless');
    
    att.lens_diameter = create_attributes(...
        {},...
        'diameter of lens', ...
        'm');
    % wavelength
    att.wavelength = create_attributes(...
        {},...
        'laser wavelength', ...
        'm');
    % prf
    att.prf = create_attributes(...
        {},...
        'Pulse repetition frequency', ...
        'Hz');
    % pulse length
    att.pulse_length = create_attributes(...
        {},...
        'Pulse length', ...
        's');
    % bandwidth
    att.bandwidth = create_attributes(...
        {},...
        'Bandwidth', ...
        'Hz');
    % time
    att.time = create_attributes(...
        {'time'},...
        'Decimal hours UTC', ...
        'Hours UTC');
    att.time.axis = 'T';
    
    %%--- Create global attributes ---%%
    % Create global attributs
    att.global.Conventions = 'CF-1.0';
    att.global.system = C.system;
    att.global.location = C.location;
    att.global.source = C.source;
    att.global.institution = C.institution;
    att.global.title = C.title;
    att.global.day   = int16(str2double(thedate(7:8)));
    att.global.month = int16(str2double(thedate(5:6)));
    att.global.year  = int16(str2double(thedate(1:4)));
    current_date = datestr(now,'yyyy-mm-dd HH:MM:SS');
    att.global.history = [current_date ' - Created by ' C.user ];

    data = orderfields(data);
    att = orderfields(att);
    dim.time = length(data.time);
    
    % Write into new netcdf
    write_nc_silent(fullfile([dir_to_folder_out '/' thedate '_' site '_halo-doppler-lidar_wind-vad-' elevangle1  '.nc']), dim, data, att)

end

