function calculateVADwindsFromPPI(site,DATES,datalevel)

% Check inputs, TBD: improve
if nargin < 2
    error('''site'' and ''DATES'' are required inputs!')
end
if ~ischar(site)
    error('The first input ''site'' must be a string.')
end
if length(DATES)>2
    error('''DATES'' can have max. length of 2.')
elseif length(DATES)==1
    % Convert to datenum to take into account leap years and hrs
    DATEstart = datenum(num2str(DATES),'yyyymmdd'); DATEend = DATEstart;
elseif ~isnumeric(DATES) || (length(num2str(DATES(1)))~=8 && ...
        length(num2str(DATES(2)))~=8)
    error(['The value(s) in the second input ''DATES'' must be' ...
        ' numerical date(s) in YYYYMMDD format.'])
else
    % Convert to datenum to take into account leap years and hrs
    DATEstart = datenum(num2str(DATES(1)),'yyyymmdd');
    DATEend   = datenum(num2str(DATES(2)),'yyyymmdd');
end
if nargin == 3 && ~ischar(datalevel)
    error('The third input ''datalevel'' must a string.')
elseif nargin== 3 && ~any(strcmp({'original','corrected'},datalevel))
    error(['The input ''datalevel'' can be one of the following:' ...
        ''' original'',''corrected'''])
elseif nargin < 3
    datalevel = 'original';
end

%%--- calculate wind retrievals ---%%
for DATEi = DATEstart:DATEend

    % Convert date into required formats
    thedate = datestr(DATEi,'yyyymmdd');
    DATE = str2double(thedate);
    
    % Get default and site/unit/period specific parameters
    C = getconfig(site,DATE);
    
    % Try locating files
    switch datalevel
        case 'original'
            path_to_dir = sprintf('%s%s/*%s.cdf',C.in_ppi_org_dir,...
                thedate(1:4),thedate);
        case 'corrected'
            path_to_dir = sprintf('%s%s/*%s*.cdf',C.out_ppi_corrected_dir,...
                thedate(1:4),thedate);
    end
    PPI_direc = dir(path_to_dir);
    if isempty(PPI_direc)
        switch datalevel
            case 'original'
                error('Can''t find files from\n%s%s/',...
                    C.in_ppi_org_dir,thedate(1:4))
            case 'corrected'
                error('Can''t find files from\n%s%s/',...
                    C.in_ppi_corrected_dir,thedate(1:4))
        end
    end
    
    % Get list of file names
    PPI_halo_files   = {};
    [PPI_halo_files{1:length(PPI_direc),1}] = deal(PPI_direc.name);
    ippi = ~cellfun('isempty',strfind(PPI_halo_files,C.file_naming_ppi));
    PPI_halo_files = PPI_halo_files(ippi);
    PPI_halo_files = sort(PPI_halo_files);
    
    % Initialize
    uwind = cell(1,length(PPI_halo_files));
    vwind = cell(1,length(PPI_halo_files));
    wwind = cell(1,length(PPI_halo_files));
    wind_speed = cell(1,length(PPI_halo_files));
    wind_direction = cell(1,length(PPI_halo_files));
    time = cell(1,length(PPI_halo_files));
    time_offset = cell(1,length(PPI_halo_files));
    base_time = cell(1,length(PPI_halo_files));
    elevation = cell(1,length(PPI_halo_files));
    mean_snr = cell(1,length(PPI_halo_files));
    nbeams = cell(1,length(PPI_halo_files));
    %     uwind_error = cell(1,length(PPI_halo_files));
    %     vwind_error = cell(1,length(PPI_halo_files));
    %     wwind_error = cell(1,length(PPI_halo_files));
    %     wind_speed_error = cell(1,length(PPI_halo_files));
    %     wind_direction_error = cell(1,length(PPI_halo_files));
    %     sigma2_res = cell(1,length(PPI_halo_files));
    %     R_sqrd = cell(1,length(PPI_halo_files));
    %     RMSE = cell(1,length(PPI_halo_files));
    %     CN = cell(1,length(PPI_halo_files));
    %     wind_speed_error_newsom = cell(1,length(PPI_halo_files));
    %     wind_direction_error_newsom = cell(1,length(PPI_halo_files));

    for i = 1:length(PPI_halo_files)
        % Load
        switch datalevel
            case 'corrected'
                [tmp,tmpatt,~] =  ...
                    load_nc_struct_silent([C.out_ppi_corrected_dir ...
                    thedate(1:4) '/' PPI_halo_files{i}]);
            case 'original'
                [tmp,tmpatt,~] =  ...
                    load_nc_struct_silent([C.in_ppi_org_dir ...
                    thedate(1:4) '/' PPI_halo_files{i}]);
        end
        
        % Wind retrieval
        [uwind{i},...
            vwind{i},...
            wwind{i},...
            wind_speed{i},...
            wind_direction{i}] = ppi2windsVAD(tmp);
        
% %         uwind_error{i},...
% %             vwind_error{i},...
% %             wwind_error{i},...
% %             wind_speed_error{i},...
% %             wind_direction_error{i},...
% %             R_sqrd{i},...
% %             RMSE{i},...
% %             sigma2_res{i},...
% %             CN{i},...
% %             wind_speed_error_newsom{i},...
% %             wind_direction_error_newsom{i}
        
        % Collect other variables and parameters
        elevation{i} = nanmedian(tmp.elevation);
        time{i} = nanmedian(tmp.time);
        time_offset{i} = nanmedian(tmp.time_offset);
        base_time{i} = nanmedian(tmp.base_time);
        mean_snr{i} = nanmean(tmp.intensity);
        nbeams{i} = length(tmp.azimuth);
    end
    
    % Calculate height above ground level
    height = sind((60)).*tmp.range;

    %%--- Create variables ---%%
    % mean snr
    data.mean_snr = cell2mat(mean_snr');
    % height
    data.height = height; % m
    % u,v,w wind components
    data.u = cell2mat(uwind)';
    data.v = cell2mat(vwind)';
    data.w = cell2mat(wwind)';
    % wind speed and direction
    data.wind_speed = cell2mat(wind_speed)';
    data.wind_direction = cell2mat(wind_direction)';
% %     % Uncertainty estimates for u,v,w wind components
% %     data.uwind_error = cell2mat(uwind_error)'; % instrumental uncertainty
% %     data.vwind_error = cell2mat(vwind_error)'; % instrumental uncertainty
% %     data.wwind_error = cell2mat(wwind_error)'; % instrumental uncertainty
% %     % Uncertainty estimates for wind speed and direction
% %     data.wind_speed_error = cell2mat(wind_speed_error)'; % instrumental uncertainty
% %     data.wind_direction_error = cell2mat(wind_direction_error)'; % instrumental uncertainty
% %     % Test for homogeneity
% %     data.R_sqrd = cell2mat(R_sqrd)';
% %     data.RMSE = cell2mat(RMSE)';
% %     data.sigma2_res = cell2mat(sigma2_res)';
% %     % Test for colinearity
% %     data.CN = cell2mat(CN)';
% %     % Uncertainty in wind speed, Newsom et al. (2017) method
% %     data.wind_speed_error_newsom = cell2mat(wind_speed_error_newsom)';
% %     % Uncertainty in wind direction, Newsom et al. (2017) method
% %     data.wind_direction_error_newsom = cell2mat(wind_direction_error_newsom)';
    
    %%--- Create default or instrument/site/unit specific variables ---%%
    data.time = cell2mat(time)';
    data.time_offset = cell2mat(time_offset)';
    data.base_time = nanmedian(cell2mat(base_time));
    data.lat = tmp.lat;
    data.lon = tmp.lon;
    data.altitude = tmp.alt;
    data.elevation_angle = cell2mat(elevation)';
    data.nbeams = cell2mat(nbeams)';
    % Clean background
    data.snr_threshold = C.SNR_vad_threshold;
    data.u_raw = data.u;
    data.v_raw = data.v;
    data.w_raw = data.w;
    data.wind_speed_raw = data.wind_speed;
    data.wind_direction_raw = data.wind_direction;
    data.u(data.mean_snr<data.snr_threshold) = nan;
    data.v(data.mean_snr<data.snr_threshold) = nan;
    data.w(data.mean_snr<data.snr_threshold) = nan;
    data.wind_speed(data.mean_snr<data.snr_threshold) = nan;
    data.wind_direction(data.mean_snr<data.snr_threshold) = nan;
    
%     data.divergence = C.divergence;
%     data.num_pulses_m2 = C.num_pulses_m2;
%     data.num_pulses_m1 = str2double(tmpatt.global.shots_per_profile);
%     data.num_samples_gate = str2double(tmpatt.global.samples_per_gate);
%     data.num_lags = C.num_lags;
%     data.lens_diameter = C.lens_diameter;
%     data.wavelength = C.wavelength;
%     data.prf = C.prf;
%     data.pulse_length = C.pulse_length;
%     data.bandwidth = C.bandwidth;
%     data.focus = str2double(tmpatt.global.focus_range);
    
    %%--- Create attributes ---%%
    % mean snr
    att.mean_snr = create_attributes(...
        {'time','height'},...
        'Signal-to-noise ratio (SNR) in arbitrary units (SNR+1) averaged over nbeams', ...
        'SNR+1');
    % height
    att.height = create_attributes(...
        {'height'},...
        'Height above ground', ...
        'm',...
        [],...
        'This variable is range from lidar * sin(elevation)');
    att.height.axis = 'Z';
    % u-wind component
    att.u = create_attributes(...
        {'time','height'},...
        'Zonal wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['Background noise filtered with SNR threshold of' ...
        C.SNR_vad_threshold '.'], ...
        {[-15 15],'linear'});
    att.u.standard_name = 'eastward_wind';
    % v-wind component
    att.v = create_attributes(...
        {'time','height'},...
        'Meridional wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['Background noise filtered with SNR threshold of' ...
        C.SNR_vad_threshold '.'], ...
        {[-15 15],'linear'});
    att.v.standard_name = 'northward_wind';
    % w-wind component
    att.w = create_attributes(...
        {'time','height'},...
        'Vertical wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['Background noise filtered with SNR threshold of' ...
        C.SNR_vad_threshold '.'], ...
        {[-2 2],'linear'});
    att.w.standard_name = 'upward_wind';
    % wind speed
    att.wind_speed = create_attributes(...
        {'time','height'},...
        'Wind speed', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        ['Background noise filtered with SNR threshold of' ...
        C.SNR_vad_threshold '.'], ...
        {[0 15],'linear'});
    % wind direction
    att.wind_direction = create_attributes(...
        {'time','height'},...
        'Wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        ['Meteorological convention, direction wind is blowing from.' ...
        ' Background noise filtered with SNR threshold of' ...
        C.SNR_vad_threshold '.'], ...
        {[0 360],'linear'});
    
     % u-wind component
    att.u_raw = create_attributes(...
        {'time','height'},...
        'Zonal wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Raw, no background filtering.', ...
        {[-15 15],'linear'});
    att.u_raw.standard_name = 'eastward_wind';
    % v-wind component
    att.v_raw = create_attributes(...
        {'time','height'},...
        'Meridional wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Raw, no background filtering.', ...
        {[-15 15],'linear'});
    att.v_raw.standard_name = 'northward_wind';
    % w-wind component
    att.w_raw = create_attributes(...
        {'time','height'},...
        'Vertical wind', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Raw, no background filtering.', ...
        {[-2 2],'linear'});
    att.w_raw.standard_name = 'upward_wind';
    % wind speed
    att.wind_speed_raw = create_attributes(...
        {'time','height'},...
        'Wind speed', ...
        {'m s-1','m sr<sup>-1</sup>'}, ...
        C.missing_value, ...
        'Raw, no background filtering.', ...
        {[0 15],'linear'});
    % wind direction
    att.wind_direction_raw = create_attributes(...
        {'time','height'},...
        'Wind direction', ...
        {'degrees','degrees'}, ...
        C.missing_value, ...
        ['Meteorological convention, direction wind is blowing from.' ...
        ' Raw, no background filtering.'], ...
        {[0 360],'linear'});
    % number of beams
    att.nbeams = create_attributes(...
        {'time'},...
        'Number of beams (azimuth angles) used in wind vector estimation', ...
        'unitless');
    % snr threshold
    att.snr_threshold = create_attributes(...
        {},...
       'SNR threshold', ...
        'unitless');
    
% %     % u-wind error
% %     att.uwind_error = create_attributes(...
% %         {'time','height'},...
% %         'Instrumental uncertainty in zonal wind', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         'Estimated from the signal-to-noise ratio.', ...
% %         {[0 1],'linear'});
% %     % v-wind error
% %     att.vwind_error = create_attributes(...
% %         {'time','height'},...
% %         'Instrumental uncertainty in meridional wind', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         'Estimated from the signal-to-noise ratio.', ...
% %         {[0 1],'linear'});
% %     % w-wind error
% %     att.wwind_error = create_attributes(...
% %         {'time','height'},...
% %         'Instrumental uncertainty in vertical wind', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         'Estimated from the signal-to-noise ratio.', ...
% %         {[0 1],'linear'});
% %     
% %     % wind speed error
% %     att.wind_speed_error = create_attributes(...
% %         {'time','height'},...
% %         'Instrumental uncertainty in wind speed', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         '', ...
% %         {[0 2],'linear'});
% %     % wind direction error
% %     att.wind_direction_error = create_attributes(...
% %         {'time','height'},...
% %         'Instrumental uncertainty in wind direction', ...
% %         {'degrees','degrees'}, ...
% %         C.missing_value, ...
% %         '', ...
% %         {[0 30],'linear'});
% %     % Test for homogeneity R_sqrd
% %     att.R_sqrd = create_attributes(...
% %         {'time','height'},...
% %         'R squared', ...
% %         {'unitless','unitless'}, ...
% %         C.missing_value, ...
% %         'Test for homogeneity R squared.', ...
% %         {[.99 1],'linear'});
% %     % Test for homogeneity RMSE
% %     att.RMSE = create_attributes(...
% %         {'time','height'},...
% %         'Root-mean-square-error', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         'Test for homogeneity Root-mean-square-error.', ...
% %         {[0 1],'linear'});
% %     % Test for homogeneity sigma2_res
% %     att.sigma2_res = create_attributes(...
% %         {'time','height'},...
% %         'Variance in residuals', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         ['Variance of the difference between the estimated sinusoidal' ...
% %         ' fit and the measured radial winds, i.e. variance in' ...
% %         ' the residuals.'], ...
% %         {[0 0.1],'linear'});
% %     % Test for collinearity CN
% %     att.CN = create_attributes(...
% %         {'time','height'},...
% %         'Condition number', ...
% %         {'unitless','unitless'}, ...
% %         C.missing_value, ...
% %         'Test for collinearity condition number.', ...
% %         {[1 30],'linear'});
% %     % wind speed error Newsom et al. (2017)
% %     att.wind_speed_error_newsom = create_attributes(...
% %         {'time','height'},...
% %         'Uncertainty in wind speed', ...
% %         {'m s-1','m sr<sup>-1</sup>'}, ...
% %         C.missing_value, ...
% %         'Calculated using the method given by Newsom et al. (2017).', ...
% %         {[0 2],'linear'});
% %     % wind direction error Newsom et al. (2017)
% %     att.wind_direction_error_newsom = create_attributes(...
% %         {'time','height'},...
% %         'Uncertainty in wind direction', ...
% %         {'degrees','degrees'}, ...
% %         C.missing_value, ...
% %         'Calculated using the method given by Newsom et al. (2017).', ...
% %         {[0 30],'linear'});
    
    %%--- Create isntrument/site/unit specific attributes --%%
    % latitude
    att.lat = create_attributes(...
        {},...
        'Latitude of lidar', ...
        'degrees_north');
    att.lat.standard_name = 'latitude';
    % longitude
    att.lon = create_attributes(...
        {},...
        'Longitude of lidar', ...
        'degrees_east');
    att.lon.standard_name = 'longitude';
    % altitude
    att.altitude = create_attributes(...
        {},...
        'Height of instrument above mean sea level', ...
        'm');
    % elevation
    att.elevation_angle = create_attributes(...
        {'time'},...
        'Elevation from horizontal', ...
        'degrees');
% %     % num_pulses_m1
% %     att.num_pulses_m1 = create_attributes(...
% %         {},...
% %         'Number of pulses per ray in mode 1', ...
% %         'unitless');
% %      % focus
% %     att.focus = create_attributes(...
% %         {},...
% %         'Focus range', ...
% %         'm');
% %     % num_samples_gate
% %     att.num_samples_gate = create_attributes(...
% %         {},...
% %         'Number of samples (points) per gate', ...
% %         'unitless');
% %     % divergence
% %     att.divergence = create_attributes(...
% %         {},...
% %         'Lidar laser beam divergence', ...
% %         'mrad');
% %     % num_pulses_m2
% %     att.num_pulses_m2 = create_attributes(...
% %         {},...
% %         'Number of pulses per ray in mode 2', ...
% %         'unitless');
% %     % num_lags
% %     att.num_lags = create_attributes(...
% %         {},...
% %         ['Number of lags used in evaluating the complex' ...
% %         ' autocorrelation function'], ...
% %         'unitless');
% %     % lens diameter
% %     att.lens_diameter = create_attributes(...
% %         {},...
% %         'diameter of lens', ...
% %         'm');
% %     % wavelength
% %     att.wavelength = create_attributes(...
% %         {},...
% %         'laser wavelength', ...
% %         'm');
% %     % prf
% %     att.prf = create_attributes(...
% %         {},...
% %         'Pulse repetition frequency', ...
% %         'Hz');
% %     % pulse length
% %     att.pulse_length = create_attributes(...
% %         {},...
% %         'Pulse length', ...
% %         's');
% %     % bandwidth
% %     att.bandwidth = create_attributes(...
% %         {},...
% %         'Bandwidth', ...
% %         'Hz');
    % arm basetime
    att.base_time = create_attributes(...
        {},...
        'Base time in Epoch', ...
        'seconds since 1970-1-1 0:00:00 0:00');
    att.base_time.string = tmpatt.base_time.string;
    % arm time
    att.time = create_attributes(...
        {'time'},...
        tmpatt.time.long_name, ...
        tmpatt.time.units);
    % arm time offset
    att.time_offset = create_attributes(...
        {'time'},...
        tmpatt.time_offset.long_name, ...
        tmpatt.time_offset.units);
    
    %%--- Create global attributes ---%%
    att.global.process_version = '';
    att.global.command_line = '';
    att.global.dod_version = '';
    att.global.Conventions = 'ARM-1.1';
    att.global.site_id = tmpatt.global.site_id;
    is = regexp(tmpatt.global.datastream,'[A-Z]');
    ie = findstr(tmpatt.global.datastream,'.')-1;
    att.global.facility_id = tmpatt.global.datastream(is:ie);
    att.global.platform_id = '';
    att.global.location_description = C.location;
    att.global.data_level = 'c1';
    att.global.datastream = [att.global.site_id 'dlprofwinds' ...
        att.global.facility_id '.' att.global.data_level];
    att.global.input_datastreams = '';
    att.global.dlat = num2str(data.lat);
    att.global.dlon = num2str(data.lon);
    att.global.serial_number = tmpatt.global.serial_number;
    att.global.doi = '';
    att.global.doi_url = '';
    att.global.history = ['created by ' C.user ' at ' datestr(now) '.'];

    %     att.global.system = C.system;
%     att.global.location = C.location;
%     att.global.source = C.source;
%     att.global.institution = C.institution;
%     att.global.title = C.title;
    
    %     att.global.title = 'ARM HALO Doppler Lidar';
    %
    %     switch site
    %         case 'arm-nsa'
    %             att.global.location = 'Northern Slopes of Alaska (NSA), Barrow, Alaska';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at NSA';
    %             att.global.institution = 'ARM Northern Slopes of Alaska (NSA)';
    %         case 'arm-sgp'
    %             att.global.location = 'Southern Great Plains (SGP), Lamont, Oklahoma';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at SGP';
    %             att.global.institution = 'ARM Southern Great Plains (SGP)';
    %         case 'arm-nauru'
    %             att.global.location = 'Tropical West Pacific, Nauru';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at Nauru';
    %             att.global.institution = 'ARM Tropical West Pacific (Nauru)';
    %         case 'arm-manus'
    %             att.global.location = 'Tropical West Pacific, Manus';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at Manus';
    %             att.global.institution = 'ARM Tropical West Pacific (Manus)';
    %         case 'arm-darwin'
    %             att.global.location = 'Tropical West Pacific, Darwin';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at Darwin';
    %             att.global.institution = 'ARM Tropical West Pacific (Darwin)';
    %         case 'arm-ganges'
    %             att.global.location = 'Ganges Valley, India';
    %             att.global.source = 'AMF HALO Doppler Lidar operating in the Ganges Valley, India';
    %             att.global.institution = 'AMF Ganges Valley, India';
    %             att.global.title = 'AMF HALO Doppler Lidar';
    %         case 'arm-cape-cod'
    %             att.global.location = 'Cape Cod, Massachusetts, US';
    %             att.global.source = 'AMF HALO Doppler Lidar operating at Cape Cod';
    %             att.global.institution = 'AMF Cape Cod, Massachusetts';
    %             att.global.title = 'AMF HALO Doppler Lidar';
    %         case {'arm-manaus','arm-manacapuru'}
    %             att.global.location = 'Manacapuru, Amazonas, Brazil';
    %             att.global.source = 'AMF HALO Doppler Lidar operating at Manacapuru';
    %             att.global.institution = 'AMF Manacapuru';
    %             att.global.title = 'AMF HALO Doppler Lidar';
    %         case 'arm-oliktok'
    %             att.global.location = 'Oliktok, Alaska, US';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at Oliktok';
    %             att.global.institution = 'ARM Oliktok';
    %             att.global.title = 'ARM HALO Doppler Lidar';
    %         case 'arm-graciosa'
    %             att.global.location = 'Graciosa, Azores, Portugal';
    %             att.global.source = 'ARM HALO Doppler Lidar operating at Graciosa';
    %             att.global.institution = 'ARM Graciosa';
    %             att.global.title = 'ARM HALO Doppler Lidar';
    %     end
    
%     % date
%     att.global.day   = str2double(thedate(7:8));
%     att.global.month = str2double(thedate(5:6));
%     att.global.year  = str2double(thedate(1:4));
%     current_date = datestr(now);
%     current_date(current_date == '-') = ' ';
    
%     % Created by
%     att.global.history = [current_date ' - Created by ' C.user ];
%     
%     % Pass along some attributes
%     att.global.site_id = tmpatt.global.site_id;
%     att.global.facility_id = tmpatt.global.facility_id;
%     att.global.serial_number = tmpatt.global.serial_number;
       
    % Create dimensiosnf
    dim = struct('time',length(data.time),'height',length(data.height));

    data = orderfields(data);
    att = orderfields(att);
    
    % Write into new netcdf
    write_nc_struct([C.out_vad_dir thedate(1:4) '/' att.global.site_id ...
        'dlprofwinds' att.global.facility_id '.' att.global.data_level ...
        '.' thedate '.nc'], dim, data, att)

end
